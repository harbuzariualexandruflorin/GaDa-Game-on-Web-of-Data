function get_card_bonus(attacker, defender):
    bonus = 0
    for type_att in attacker.card_types():
        for type_def in defender.card_types():
            if type_att.is_stronger_than(type_def):
                bonus += BONUS_TYPE_MAGIC_NUMBER
    return bonus


function get_chain_bonus(chain):
    return chain.len() * BONUS_CHAIN_MAGIC_NUMBER


function game_logic(cards_per_round, nr_rounds):
    deck = GADA_API.generate_deck(ddeck_size=2 * cards_per_round * nr_rounds, randomize=true)
    has_player_won_quiz = false
	current_turn = null

    while deck.has_cards():
        human_hand = deck.extract(cards_per_round, better_average_cards=has_player_won_quiz)
        data_human_hand = GADA_API.generate_json_data(human_hand)
        computer_hand = deck.extract(cards_per_round)
		display_data_human_hand(data_human_hand)

        current_card_chain = []
        chain_winner = null
		if current_turn is null:
			current_turn = select_random([human, computer])
		elif has_player_won_quiz:
			current_turn = human
		else:
			current_turn = computer

        while human_hand().has_cards() or computer_hand.has_cards():
            if current_turn == human:
                current_card = human_hand.get_selected_card(can_skip_hand = (current_card_chain.len() % 2 == 0 and current_card_chain.len() > 0))
            else:
                current_card = computer_hand.get_selected_card(can_skip_hand = (current_card_chain.len() % 2 == 0 and current_card_chain.len() > 0))

            current_card_chain.append(current_card)
            if current_card_chain.len() % 2 == 0:
                last_card = current_card_chain[current_card_chain.len() - 1]
                next_to_last_card = current_card_chain[current_card_chain.len() - 2]

                if last_card.score + get_card_bonus(last_card, next_to_last_card) <= next_to_last_card.score + get_card_bonus(next_to_last_card, last_card):
                    chain_winner = next_to_last_card.get_card_player()
                    chain_winner.score += get_chain_bonus(current_card_chain)
            if current_card_chain.len() % 2 == 1 and current_card_chain.len() > 2:
                last_card = current_card_chain[current_card_chain.len() - 1]
                next_to_last_card = current_card_chain[current_card_chain.len() - 2]

                if last_card is null or (last_card.score + get_card_bonus(last_card, next_to_last_card) <= next_to_last_card.score + get_card_bonus(next_to_last_card, last_card)):
                    current_card_chain.remove(last_card)

					if last_card is not null:
						if current_turn == human:
							human_hand.add_card_back(last_card)
						else:
							computer_hand.add_card_back(last_card)

                    chain_winner = next_to_last_card.get_card_player()
                    chain_winner.score += get_chain_bonus(current_card_chain)

            if chain_winner is null:
                if current_turn == human:
                    current_turn = computer
                else:
                    current_turn = human
            else:
                current_turn = chain_winner
                current_card_chain = []
                chain_winner = null

		if deck.has_cards():
			has_player_won_quiz = GADA_API.start_quiz(cards_data=data_human_hand)

    if human.score > computer.score:
        announce_winner(human)
    elif computer.score > human.score:
        announce_winner(computer)
    else:
        announce_draw()
